### YamlMime:PythonClass
uid: azure.communication.chat.aio.ChatClient
name: ChatClient
fullName: azure.communication.chat.aio.ChatClient
module: azure.communication.chat.aio
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.


  This client provides operations to create a chat thread, delete a chat thread,

  get chat thread by id, list chat threads.'
constructor:
  syntax: 'ChatClient(endpoint: str, credential: azure.communication.chat._shared.user_credential_async.CommunicationUserCredential,
    **kwargs) -> None'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate.
    isRequired: true
    types:
    - <xref:CommunicationUserCredential>
examples:
- "Creating the ChatClient from a URL and token.<!--[!code-python[Main](les\\chat_client_sample_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b3\\\
  \\samples\\\\chat_client_sample_async.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from azure.communication.chat.aio import ChatClient, CommunicationUserCredential\n\
  \   chat_client = ChatClient(self.endpoint, CommunicationUserCredential(self.token))\n\
  \n   ````\n"
methods:
- uid: azure.communication.chat.aio.ChatClient.close
  name: close
  signature: close() -> None
- uid: azure.communication.chat.aio.ChatClient.create_chat_thread
  name: create_chat_thread
  summary: Creates a chat thread.
  signature: 'create_chat_thread(topic: str, thread_members: typing.List[azure.communication.chat._models.ChatThreadMember],
    **kwargs) -> azure.communication.chat.aio._chat_thread_client_async.ChatThreadClient'
  parameters:
  - name: topic
    description: Required. The thread topic.
    isRequired: true
    types:
    - <xref:str>
  - name: thread_members
    description: Required. Members to be added to the thread.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.communication.chat.ChatThreadMember>]
  return:
    description: ChatThreadClient
    types:
    - <xref:azure.communication.chat.aio.ChatThreadClient>
  examples:
  - "Creating ChatThreadClient by creating a new chat thread.<!--[!code-python[Main](les\\\
    chat_client_sample_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b3\\\\samples\\\
    \\chat_client_sample_async.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   topic = \"test topic\"\n   members = [ChatThreadMember(\n   \
    \    user=self.user,\n       display_name='name',\n       share_history_time=datetime.utcnow()\n\
    \   )]\n   chat_thread_client = await chat_client.create_chat_thread(topic, members)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.delete_chat_thread
  name: delete_chat_thread
  summary: Deletes a thread.
  signature: 'delete_chat_thread(thread_id: str, **kwargs) -> None'
  parameters:
  - name: thread_id
    description: Required. Thread id to delete.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: None, or the result of cls(response)
    types:
    - <xref:None>
  examples:
  - "deleting chat thread.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b3\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await chat_client.delete_chat_thread(self._thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.get_chat_thread
  name: get_chat_thread
  summary: Gets a chat thread.
  signature: 'get_chat_thread(thread_id: str, **kwargs) -> azure.communication.chat._models.ChatThread'
  parameters:
  - name: thread_id
    description: Required. Thread id to get.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: ChatThread, or the result of cls(response)
    types:
    - <xref:azure.communication.chat.ChatThread>
  examples:
  - "Getting a chat thread by thread id.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b3\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   chat_thread =\
    \ await chat_client.get_chat_thread(self._thread_id)\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.get_chat_thread_client
  name: get_chat_thread_client
  summary: Get ChatThreadClient by providing a thread_id.
  signature: 'get_chat_thread_client(thread_id: str, **kwargs) -> azure.communication.chat.aio._chat_thread_client_async.ChatThreadClient'
  parameters:
  - name: thread_id
    description: Required. The thread id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatThreadClient
    types:
    - <xref:azure.communication.chat.aio.ChatThreadClient>
  examples:
  - "Creating the ChatThreadClient from an existing chat thread id.<!--[!code-python[Main](les\\\
    chat_client_sample_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b3\\\\samples\\\
    \\chat_client_sample_async.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.communication.chat.aio import ChatClient, CommunicationUserCredential\n\
    \n   chat_client = ChatClient(self.endpoint, CommunicationUserCredential(self.token))\n\
    \   chat_thread_client = chat_client.get_chat_thread_client(self._thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.list_chat_threads
  name: list_chat_threads
  summary: Gets the list of chat threads of a user.
  signature: list_chat_threads(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._generated.models._models_py3.ChatThreadInfo]
  parameters:
  - name: results_per_page
    description: The maximum number of chat threads to be returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get chat threads up to.
    types:
    - <xref:datetime.datetime>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: AsyncItemPaged[<xref:azure.communication.chat.ChatThreadInfo>]
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>
  examples:
  - "listing chat threads.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b3\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n   import pytz\n   start_time = datetime.utcnow()\
    \ - timedelta(days=2)\n   start_time = start_time.replace(tzinfo=pytz.utc)\n \
    \  chat_thread_infos = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\n\
    \   print(\"list_threads succeeded with results_per_page is 5, and were created\
    \ since 2 days ago.\")\n   async for info in chat_thread_infos:\n       print(\"\
    thread id: \", info.id)\n\n   ````\n"
